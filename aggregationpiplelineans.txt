1.Find all female users from Jaipur who know Python.

db.users.aggregate(
    [
        {
            $match: {
            gender:"Female",
            city:"Jaipur",
            skills:"Python"
            }
        }
    ]
)

2.Find all male users in Delhi who are above age 26
db.users.aggregate(
    [
        {
            $match: {
            city:"New Delhi",
            gender:"Male",
            age:{$gt:26}
            }
        }
    ]
)

3.Find all users who are from either New Delhi or Mumbai.

$in: more than one true.

db.users.aggregate(
    [
        {
            $match: {
            city:{$in:["New Delhi","Mumbai"]}
            }
        }
    ]
)

4. Total users from new Delhi 

db.users.aggregate(
    [
        {
            $match: {
                city:"New Delhi"
            }
        },

        {
            $count: 'TotalUsersFromNewDelhi'
        }
    ]
)

5.Total users from Jaipur as female 

db.users.aggregate(
    [
        {
            $match: {
                city:"Jaipur",
                    gender:"Female"
            }
        },
        {
            $count: 'TotalFemaleUsersFromJaipur'
        }
    ]
)

6.New Delhi male user having python ka count

db.users.aggregate(
    [
        {
            $match: {
                city:"New Delhi",
                    gender:"Male",
                    skills:"Python"
            }
        },
        {
            $count: 'UserFromNewDelhiHavingSkillPython'
        }
    ]
)
7.user from Hyderabad having skill java and cpp age greater than 24 ka count d
[
  {
    $match: {
          city:"Hyderabad",
      		age:{$gt:24},
      		skills:{$all:["C++","Java"]}
      }
  },
  {
    $count: 'javacppfromhyd'
  }
]

//groups 
can be done on the basis of any key 

documents ko on the basis of skills, gender, city 

1. find count of each city

db.users.aggregate([
  {
    $group: {
      _id: "$city",
      countuser:{$sum:1}
    }
  },
])

2.find total male and female in document in Group
db.user.aggregate(
    [
        {
            $group: {
            _id: "$gender",
            countuser:{$sum:1}
            }
        },
    ]
)

3. based on age group and find total no of documents in each age group 

db.users.aggregate(
    [
        {
            $group: {
            _id: "$age",
            countuser:{$sum:1}
            }
        },
    ]
)

4. group user by lastname 
db.users.aggregate(
    [
        {
            $group: {
            _id: "$lastName",
            countuser:{$sum:1},
            users:{$push:"$$ROOT"}
            }
        }
    ]
)